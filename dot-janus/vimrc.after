" make cucumber commands execute with DEVTOOLS enabled
let test#ruby#cucumber#executable = 'DEVTOOLS=1 ./bin/cucumber'


if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <M-[> <Esc>
  tnoremap <C-v><Esc> <Esc>
endif


" NERDTree -------------------------------------------------------------------{{{
nmap <silent> <Leader>n :NERDTreeFind<CR>

function! s:SID()
  if ! exists('s:sid')
    let s:sid = matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$')
  endif
  return s:sid
endfunction
let s:SNR = '<SNR>'.s:SID().'_'

call NERDTreeAddKeyMap({
      \ 'key': 'w',
      \ 'callback': s:SNR.'toggle_width',
      \ 'quickhelpText': 'Toggle window width' })

function! s:toggle_width()
  let l:max = 0
  for l:z in range(1, line('$'))
    let l:len = len(getline(l:z))
    if l:len > l:max
      let l:max = l:len
    endif
  endfor
  exe 'vertical resize '.(l:max == winwidth('.') ? g:NERDTreeWinSize : l:max)
endfunction
"}}}

" Ctrl+S to save -------------------------------------------------------------------{{{
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>
"}}}


" Linting -------------------------------------------------------------------{{{
noremap <leader>a :Neoformat<CR>

let g:neoformat_only_msg_on_error = 1
let g:neoformat_enabled_javascript = ['prettiereslint']
autocmd! BufWritePost * Neomake
" autocmd BufWritePre *.js,*.rb Neoformat
" Disable the annoying rubocop
" let g:neomake_ruby_enabled_makers = ['mri', 'reek']

let g:neomake_warning_sign = {'text': '•'}
let g:neomake_error_sign = {'text': '•'}
if exists('./node_modules/.bin/eslint/')
  let g:neomake_eslint_maker = { 'exe': './node_modules/.bin/eslint' }
  let g:neomake_javascript_enabled_makers = ['eslint']
endif
"}}}

" Copy to osx clipboard  -------------------------------------------------------------------{{{
vnoremap <C-c> "*y<CR>
vnoremap y "*y<CR>
nnoremap Y "*Y<CR>
vnoremap y myy`y
vnoremap Y myY`y
"}}}

" color scheme -------------------------------------------------------------------{{{
colorscheme gruvbox
let g:gruvbox_italic=1
set background=dark
"}}}

" Emmet customization -------------------------------------------------------{{{

" Remapping <C-y>, just doesn't cut it.
function! s:expand_html_tab()
  " try to determine if we're within quotes or tags.
  " if so, assume we're in an emmet fill area.
  let line = getline('.')
  if col('.') < len(line)
    let line = matchstr(line, '[">][^<"]*\%'.col('.').'c[^>"]*[<"]')
    if len(line) >= 2
      return "\<C-n>"
    endif
  endif
  " expand anything emmet thinks is expandable.
  if emmet#isExpandable()
    return emmet#expandAbbrIntelligent("\<tab>")
    " return "\<C-y>,"
  endif
  " return a regular tab character
  return "\<tab>"
endfunction
" let g:user_emmet_expandabbr_key='<Tab>'
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

autocmd FileType html,css,scss,javascript.jsx imap <silent><buffer><expr><tab> <sid>expand_html_tab()
let g:user_emmet_mode='a'
let g:user_emmet_complete_tag = 0
let g:user_emmet_install_global = 0
autocmd FileType html,css,scss,javascript.jsx EmmetInstall

" expanding class to className in .js files
let g:user_emmet_settings = {
      \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
      \}
"}}}
